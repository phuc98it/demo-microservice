nest generate library common
    => libs/common : chứa những tài nguyên dùng chung, cho các module.

npm i @nestjs/mongoose mongoose
    => install mongo db

nest generate module database -p <name_module>
    -> CREATE libs/common/src/database/database.module.ts (85 bytes)
    -> UPDATE libs/common/src/common.module.ts (282 bytes)

- quản lí project trong "nest-cli.json",
    cụ thể  ở "projects" : {
        "common": { ... },          //-> đây là 1 module.
        ...
    }

- Vì libs/common cung cấp các dịch vụ hộ trợ, nên phần định nghĩa module là ko cần thiết.
    => xóa module common.
- Mỗi module xác định dựa vào file index.ts gốc của module đó.
    +) Do ta định nghĩa common ko phải là module nên cũng phải xóa nôi dung trong nó,
    và thay vào đó là nội dung sẽ liên quan đến những service cung cấp cho việc dùng chung.


nest generate module config -p <name_module>
    -> ConfigModule : cấu hình chung - như biến môi trường.
    -> ConfigService : để sử dụng biến môi trường.
    -> DatabaseModule : khởi tạo connect DB.

- sau khi setup 'DatabaseModule' ở libs/common xong -> ta import 'DatabaseModule' vào trong app module 'root'.

- Muốn custom 'path' vào tsconfig.json -> paths -> khai báo theo ý muốn.

[MongooseModule.forRoot('mongodb://localhost/sleepr')]



== Abstract - Schema ==
- Tạo entity common chung : chứa 'id'.
    -> các Schema khác sẽ extract từ đây mà ra.


- Omit<TDocument, '_id'> : nhận đầu vào dạng TDocument, nhưng loại bỏ thuộc tính _id.


== Revervation ==
- là product mới => nest g app revervation.
- set cho 'revervations' là root product.
    => update trong file 'nest-cli.json'
    +) sourceRoot : "apps/revervations/src"     -> source gốc của project
    +) root : "apps/revervations"               -> nơi định nghĩa 'root project'
    => nest start -> run : apps/revervations/*

- Generate Feature : npm g resource <name_feature>

- Common database : tạo nơi khai báo chung schema - by feature.
    +) name: <T>Document.name
    +) schema: <T>Schema


== validator: npm i nestjs-pino pino-http pino-pretty

== auth ==
- nest g app auth
- nest g module auth 
- nest g module users

== Docker ==
- ứng dụng rất tốt khi run multi images at once.
run: đứng từ folder reservations   
    +) docker build ../../ -f Dockerfile -t sleepr_reservations     // -t : tag - đánh dấu tên image đc tạo ra
        -> build : tạo ra image 'sleepr_reservations'.
    +) docker run sleepr_reservations
        -> run image.

chạy với ko có 'docker-compose'
chạy có 'docker-compose'    : docker compose up 


@Payload() data : any === request.data
    => data.user === request.user 
tap : res = data.user
    -> dữ liệu trả về  - được định nghĩa ở common/dto/UserDto (có thêm trường _id)


== payment ==
- nest g app payments
- npm i stripe

feature : create charge (thanh toán)
    1. Xác thực 'card'  -> áp dụng 'paymentMethods' - return Card1 (Thông tin thẻ)
    Card1 {         
        cvc?: string;
        exp_month: number;
        exp_year: number;
        networks?: Card1.Networks;
        number: string;
    }

    2. Xác nhận 'đơn hàng' -> áp dụng 'paymentIntents'
    +) thanh toán = 'card' ?
    +) cấu hình : giá thành hóa đơn ?
    +) xác thực - confirm : true.

== Từ vựng ==
- associate     : kết hợp.
- reversation   : giỏ hàng / hàng tồn / lượng sản phẩm / đơn hàng.
- invoice       : hóa đơn.
- charge        : thanh toán - tiền phí.
- amout         : số  lượng.


=== ENV ===
MONGO_USERNAME=admin
MONGO_PASSWORD=admin
MONGO_DATABASE=sleepr
MONGO_HOST=mongo:27017

MONGODB_URI=mongodb://mongo:27017/sleepr

JWT_SECRET=4YdOfiPtyv1aYAjSdr7MidPOnmZHtT4AdLAvQldpHvD2SROwEXS7E1JQHhUn0XEy0bOCCHnI8zIxWKocI7ASb7Kh3uQ0spn9FsZ
JWT_EXPIRATION=3600

PORT=3000

PORT_AUTH=3001
TCP_PORT_AUTH=3002
AUTH_HOST=0.0.0.0
AUTH_PORT=3002

PORT_PAYMENT=3003
PAYMENTS_HOST=0.0.0.0
PAYMENTS_PORT=3003

PORT_NOTIFICATION=3004
NOTIFICATION_HOST=0.0.0.0
NOTIFICATION_PORT=3004

=== GCP ===
1. docker build -t reservations -f . ../../

2. docker tag revervations <link repo gpc>/production

3. docker image push <link repo gpc>/production

4. Apply with docker-compose.
	docker compose up --build

pnpm : tích kiệm bộ nhớ hơn so với node/yarn.
    +) pnpm đạt được tốc độ cài đặt nhanh nhờ vào việc không có blocking time giữa các step.
    +) Bằng cách ánh xạ tới 'content-addressable store'.
    +) lần đầu setup sẽ chậm hơn so với npm/yarn.


Tách : 
    1. UserSchema - ràng buộc với decorator @CurrentUser(...) -> nên tạo thêm ở @Common.
    2. Việc build từ docker-compose (run dev env) khác so với redirect vào folder để build => COPY resource . tới nơi làm việc là khác nhau.
        => Refactor lại Dockerfile - chỉ lấy những resource liên quan tới mỗi module/service đó.
    3. Dependencies chia ra các module/service có ràng buộc đến đó.
        => Giảm tải đc name_module ko phải chứa các libary không cần thiết.


Test ...